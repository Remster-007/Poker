#include<stdio.h>
#include <time.h>
#include <stdbool.h>
#include <stdlib.h>

// struct of a hand
struct hand {
	bool straight;
	bool flush;
	bool four;
	bool three;
	int pairs;
	int suitsInHand[4];
	int facesInHand[13];
	int four_index;
	int three_index;
	int pair1_index;
	int pair2_index;
};

//function to print hand arrays
void print_hand(struct hand* H) {
	int i;
	for (i = 0; i < 4; i++) {
		printf("%d ", H->suitsInHand[i]);
	}
	printf("\n");
	for (i = 0; i < 13; i++) {
		printf("%d ", H->facesInHand[i]);
	}
	printf("\n");
}

// function to analyze a hand
void analyzeHand(struct hand* H, int SUITS, int FACES)
{
	int num_consec = 0;
	int rank, suit;

	bool straight = false;
	bool flush = false;
	bool four = false;
	bool three = false;
	int pairs = 0;
	int four_index = -1;
	int three_index = -1;
	int pair1_index = -1;
	int pair2_index = -1;

	// check for flush – 5 cards of the same suit
	for (suit = 0; suit < SUITS; suit++)
		if (H->suitsInHand[suit] == 5)
			flush = true;

	// check for straight – eg. One each of 5,6,7,8,9
	// locate the first card
	rank = 0;
	while (H->facesInHand[rank] == 0)
		rank++;

	//count the consecutive non-zero faces
	for (; rank < FACES && H->facesInHand[rank]; rank++)
		num_consec++;

	if (num_consec == 5) {
		straight = true;
		return;
	}

	/* check for 4-of-a-kind, 3-of-a-kind, and pairs */
	for (rank = 0; rank < FACES; rank++) {
		if (H->facesInHand[rank] == 4) {
			four = true;
			four_index = rank;
		}
		if (H->facesInHand[rank] == 3) {
			three = true;
			three_index = rank;
		}
		if (H->facesInHand[rank] == 2) {
			pairs++;
			if (pairs == 1) {
				pair1_index = rank;
			}
			else {
				pair2_index = rank;
			}
		}
	}
	H->straight = straight;
	H->flush = flush;
	H->four = four;
	H->three = three;
	H->pairs = pairs;
}

// function to compare two hands (1 means hand1 won, 0 means hand2)
int compare_hands(struct hand* hand1, struct hand* hand2) {
	analyzeHand(hand1, 4, 13);
	analyzeHand(hand2, 4, 13);
	printf("Winning criteria: ");
	if (hand1->straight && hand1->flush) {
		if (hand2->straight && hand2->flush) {
			int i;
			for (i = 12; i >= 0; i--) {
				if (hand1->facesInHand[i] && !hand2->facesInHand[i]) {
					printf("Straight flush\n\n"); return 1;
				}
				else if (!hand1->facesInHand[i] && hand2->facesInHand[i]) {
					printf("Straight flush\n\n"); return 0;
				}
			}
			printf("Both hands same\n\n"); return 2;
		}
		printf("Straight flush\n\n"); return 1;
	}
	else if (hand2->straight && hand2->flush) {
		printf("Straight flush\n\n"); return 0;
	}
	else if (hand1->four) {
		if (hand2->four) {
			if (hand1->four_index < hand2->four_index) {
				printf("Four of a kind\n\n"); return 1;
			}
			else if (hand1->four_index > hand2->four_index) {
				printf("Four of a kind\n\n"); return 0;
			}
			else {
				int i;
				for (i = 12; i > hand1->four_index; i--) {
					if (hand1->facesInHand[i] && !hand2->facesInHand[i]) {
						printf("Four of a kind\n\n"); return 1;
					}
					else if (!hand1->facesInHand[i] && hand2->facesInHand[i]) {
						printf("Four of a kind\n\n"); return 0;
					}
					else {
						printf("Both hands same\n\n"); return 2;
					}
				}
			}
		}
		printf("Four of a kind\n\n"); return 1;
	}
	else if (hand2->four) {
		printf("Four of a kind\n\n"); return 0;
	}
	else if (hand1->three && hand1->pairs == 1) {
		if (hand2->three && hand2->pairs == 1) {
			if (hand1->three_index < hand2->three_index) {
				printf("Full house\n\n"); return 1;
			}
			else if (hand1->three_index > hand2->three_index) {
				printf("Full house\n\n"); return 0;
			}
			else if (hand1->pair1_index < hand2->pair1_index) {
				printf("Full house\n\n"); return 1;
			}
			else if (hand1->pair1_index > hand2->pair1_index) {
				printf("Full house\n\n"); return 0;
			}
			else {
				printf("Both hands same\n\n"); return 2;
			}
		}
		printf("Full house\n\n"); return 1;
	}
	else if (hand2->three && hand2->pairs == 1) {
		printf("Full house\n\n"); return 0;
	}
	else if (hand1->flush) {
		if (hand2->flush) {
			int i;
			for (i = 12; i >= 0; i--) {
				if (hand1->facesInHand[i] && !hand2->facesInHand[i]) {
					printf("Flush\n\n"); return 1;
				}
				else if (!hand1->facesInHand[i] && hand2->facesInHand[i]) {
					printf("Flush\n\n"); return 0;
				}
			}
			printf("Both hands same\n\n"); return 2;
		}
		printf("Flush\n\n"); return 1;
	}
	else if (hand2->flush) {
		printf("Flush\n\n"); return 0;
	}
	else if (hand1->straight) {
		if (hand2->straight) {
			int i;
			for (i = 12; i >= 0; i--) {
				if (hand1->facesInHand[i] && !hand2->facesInHand[i]) {
					printf("Straight\n\n"); return 1;
				}
				else if (!hand1->facesInHand[i] && hand2->facesInHand[i]) {
					printf("Straight\n\n"); return 0;
				}
			}
			printf("Both hands same\n\n"); return 2;
		}
		printf("Straight\n\n"); return 1;
	}
	else if (hand2->straight) {
		printf("Straight\n\n"); return 0;
	}
	else if (hand1->three) {
		if (hand2->three) {
			if (hand1->three_index < hand2->three_index) {
				printf("Three of a kind\n\n"); return 1;
			}
			else if (hand1->three_index > hand2->three_index) {
				printf("Three of a kind\n\n"); return 0;
			}
			else {
				int i;
				for (i = 12; i > hand1->three_index; i--) {
					if (hand1->facesInHand[i] && !hand2->facesInHand[i]) {
						printf("Straight\n\n"); return 1;
					}
					else if (!hand1->facesInHand[i] && hand2->facesInHand[i]) {
						printf("Straight\n\n"); return 0;
					}
				}
				printf("Both hands same\n\n"); return 2;
			}
		}
		printf("Three of a kind\n\n"); return 1;
	}
	else if (hand2->three) {
		printf("Three of a kind\n\n"); return 0;
	}
	else if (hand1->pairs == 2) {
		if (hand2->pairs == 2) {
			if (hand1->pair1_index < hand2->pair1_index) {
				printf("Two pairs\n\n"); return 1;
			}
			else if (hand1->pair1_index > hand2->pair1_index) {
				printf("Two pairs\n\n"); return 0;
			}
			else if (hand1->pair2_index < hand2->pair2_index) {
				printf("Two pairs\n\n"); return 1;
			}
			else if (hand1->pair2_index > hand2->pair2_index) {
				printf("Two pairs\n\n"); return 0;
			}
			else {
				int i;
				for (i = 12; i > hand1->pair2_index; i--) {
					if (hand1->facesInHand[i] && !hand2->facesInHand[i]) {
						printf("Straight\n\n"); return 1;
					}
					else if (!hand1->facesInHand[i] && hand2->facesInHand[i]) {
						printf("Straight\n\n"); return 0;
					}
				}
				printf("Both hands same\n\n"); return 2;
			}
		}
		printf("Two pairs\n\n"); return 1;
	}
	else if (hand2->pairs == 2) {
		printf("Two pairs\n\n"); return 0;
	}
	else if (hand1->pairs == 1) {
		if (hand2->pairs == 1) {
			if (hand1->pair1_index < hand2->pair1_index) {
				printf("Pair\n\n"); return 1;
			}
			else if (hand1->pair1_index > hand2->pair1_index) {
				printf("Pair\n\n"); return 0;
			}
			else {
				int i;
				for (i = 12; i > hand1->pair1_index; i--) {
					if (hand1->facesInHand[i] && !hand2->facesInHand[i]) {
						printf("Straight\n\n"); return 1;
					}
					else if (!hand1->facesInHand[i] && hand2->facesInHand[i]) {
						printf("Straight\n\n"); return 0;
					}
				}
				printf("Both hands same\n\n"); return 2;
			}
		}
		printf("Pair\n\n"); return 1;
	}
	else if (hand2->pairs == 1) {
		printf("Pair\n\n"); return 0;
	}
	else {
		int i = 0;
		for (i = 12; i >= 0; i--) {
			if (hand1->facesInHand[i] > hand2->facesInHand[i]) {
				printf("High card\n\n"); return 1;
			}
			else if (hand1->facesInHand[i] < hand2->facesInHand[i]) {
				printf("High card\n\n"); return 0;
			}
			else {
				printf("Both hands same\n\n"); return 2;
			}
		}
	}

}

// function to generate 5 cards of a hand
void populate_hand(struct hand* H) {
	int i;
	for (i = 0; i < 4; ++i)
	{
		H->suitsInHand[i] = 0;
	}
	for (i = 0; i < 13; ++i)
	{
		H->facesInHand[i] = 0;
	}
	int sum = 0;
	// generate 5 random cards
	while (sum < 5) {
		int suit = rand() % 4;
		int rank = rand() % 13;
		H->suitsInHand[suit] = H->suitsInHand[suit] + 1;
		H->facesInHand[rank] = H->facesInHand[rank] + 1;
		sum++;
	}
}

int main() {
	srand(time(0));
	int SUITS = 4;
	int FACES = 13;

	struct hand hand1;
	struct hand hand2;
	//populate first hand
	populate_hand(&hand1);
	//populate second hand
	populate_hand(&hand2);

	//printing arrays of a hand
	printf("first hand:\n");
	print_hand(&hand1);
	printf("second hand:\n");
	print_hand(&hand2);

	int ans = compare_hands(&hand1, &hand2);
	if (ans == 1) {
		printf("hand1 won!");
	}
	else if (ans == 0) {
		printf("hand2 won!");
	}
	else {
		printf("Both hands are same!");
	}

}
